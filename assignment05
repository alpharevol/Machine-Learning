import matplotlib.pyplot as plt
import numpy as np
from scipy import signal
from skimage import io, color


file_image = 'cau.jpg'

im_color = io.imread(file_image)
im_gray = color.rgb2gray(im_color)

def xConvolution(image):
    x_kernel = np.array([[1,-1]])
    image = signal.convolve2d(image, x_kernel, boundary='symm', mode='same')

    return image


def yConvolution(image):
    y_kernel = np.array([[1],[-1]])
    image = signal.convolve2d(image, y_kernel, boundary='symm', mode='same')

    return image
    
    def absoluteGradient(x_image, y_image):
    return ((x_image ** 2) + (y_image ** 2)) ** 0.5
    
    def direction(image):
    return np.arctan(image)
    
    def smoothing(image):
    kernel = np.ones((5,5)) * (1/25)
    smooth_image = signal.convolve2d(image, kernel, boundary='symm', mode='same')

    return smooth_image
    
    def ownKernel(image):
    #kernel = np.ones((3, 3)) * (1/9)
    kernel = np.array([[-5,-5,-5],[-5,8,-5],[-5, -5,-5]])
    own_image = signal.convolve2d(image, kernel, boundary='symm', mode='same')

    return own_image
    
    plt.imshow(im_color)
plt.axis('off')
plt.show()

plt.imshow(im_gray, cmap='gray')
plt.axis('off')
plt.show()

x_convImage = xConvolution(im_gray)
plt.imshow(x_convImage, cmap='gray')
plt.axis('off')
plt.show()

print(x_convImage)


[[ 0.          0.          0.         ...  0.          0.
   0.        ]
 [ 0.          0.          0.         ...  0.          0.
   0.        ]
 [ 0.          0.          0.         ...  0.          0.
   0.        ]
 ...
 [ 0.         -0.00784314 -0.01176471 ...  0.00392157  0.00392157
   0.        ]
 [ 0.         -0.00392157 -0.00784314 ...  0.00784314  0.01176471
   0.00392157]
 [ 0.         -0.00392157 -0.00784314 ...  0.00784314  0.01176471
   0.00392157]]
   
   y_convImage = yConvolution(im_gray)
plt.imshow(y_convImage, cmap='gray')
plt.axis('off')
plt.show()

print(y_convImage)
    
